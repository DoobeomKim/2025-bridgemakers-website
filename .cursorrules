# 브릿지메이커스 웹사이트 개발 규칙

## 1. 컴포넌트 렌더링 규칙

### 서버 컴포넌트 (*.tsx)
- 초기 데이터 로딩
- SEO 관련 작업
- 정적 UI 렌더링
- 데이터 프리페치

### 클라이언트 컴포넌트 ('use client')
- 상호작용 로직
- 실시간 상태 관리
- 이벤트 핸들링
- 브라우저 API 사용

## 2. 데이터 관리 규칙

### 상태 관리
- Context API 사용
- 전역 상태 최소화
- Props Drilling 방지
- 상태 업데이트 일관성 유지

### 캐싱 전략
- localStorage 사용 시 만료 시간 설정
- 중복 요청 방지 (1초 이내)
- 캐시 무효화 조건 명시

## 3. 성능 최적화 규칙

### 컴포넌트 최적화
- React.memo 적절히 사용
- useCallback/useMemo 활용
- 불필요한 리렌더링 방지
- 코드 스플리팅 활용

### 데이터 페칭
- 서버 사이드 우선
- 클라이언트는 실시간 데이터만
- 낙관적 업데이트 구현
- 에러 바운더리 사용

## 4. 코드 스타일

### 네이밍
- 컴포넌트: PascalCase
- 함수/변수: camelCase
- 상수: UPPER_SNAKE_CASE
- 타입/인터페이스: PascalCase

### 로깅
- 🚀 초기화
- 🔄 상태 변화
- ✅ 성공
- ❌ 에러
- ⚠️ 경고
- 📡 네트워크 요청

## 5. 보안 규칙

### 인증/인가
- 토큰은 httpOnly 쿠키 사용
- CSRF 토큰 필수
- XSS 방지 (dangerouslySetInnerHTML 금지)
- 권한 검사는 서버사이드 필수

### 데이터 보안
- 민감정보 노출 금지
- API 키는 환경변수로 관리
- 사용자 입력 검증 필수
- SQL 인젝션 방지

### 서버, 클라이언트 컴포넌트 작성시
- Supabase Auth Helpers for Next.js 가이드를 따릅니다.
- App Router 방식으로 구현합니다.
- 서버/클라이언트 컴포넌트 경계를 명확히 구분합니다.
- 서버 쪽 테이블, 함수 관련 코드 수정을 할때는, 
mcp를 최대한 활용해서 DB를 제대로 확인한 다음에 수정하는것을 원칙으로 합니다.