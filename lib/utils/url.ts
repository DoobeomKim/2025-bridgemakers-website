// URL Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
export const getURL = () => {
  // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎäî Ïã§Ï†ú ÎèÑÎ©îÏù∏ Í∞ïÏ†ú ÏÇ¨Ïö©
  if (process.env.NODE_ENV === 'production') {
    // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎäî Ïã§Ï†ú ÎèÑÎ©îÏù∏ ÏÇ¨Ïö©
    const productionURL = process?.env?.NEXT_PUBLIC_SITE_URL || 'https://ibridgemakers.de';
    return productionURL.endsWith('/') ? productionURL : `${productionURL}/`;
  }
  
  let url = 
    process?.env?.NEXT_PUBLIC_SITE_URL ?? // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú ÏÑ§Ï†ï
    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Vercel ÏûêÎèô ÏÑ§Ï†ï
    'http://localhost:3000/' // Î°úÏª¨ Í∞úÎ∞úÌôòÍ≤Ω

  // ÌîÑÎ°úÌÜ†ÏΩú Ï≤òÎ¶¨ - Î°úÏª¨Ìò∏Ïä§Ìä∏Îäî HTTP, ÎÇòÎ®∏ÏßÄÎäî HTTPS
  if (!url.startsWith('http')) {
    const isLocalhost = url.includes('localhost') || url.includes('127.0.0.1');
    url = isLocalhost ? `http://${url}` : `https://${url}`;
  }
  
  // ÎßàÏßÄÎßâ Ïä¨ÎûòÏãú Î≥¥Ïû•
  url = url.endsWith('/') ? url : `${url}/`
  
  return url
}

export const getAuthCallbackURL = (locale?: string) => {
  let baseURL: string;
  
  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎäî ÌòÑÏû¨ origin ÏÇ¨Ïö©
  if (typeof window !== 'undefined') {
    // ÌòÑÏû¨ ÎèÑÎ©îÏù∏Ïù¥ ibridgemakers.deÏù∏ÏßÄ ÌôïÏù∏
    if (window.location.hostname === 'ibridgemakers.de') {
      baseURL = 'https://ibridgemakers.de/';
    } else if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      baseURL = `${window.location.protocol}//${window.location.host}/`;
    } else {
      // Í∏∞ÌÉÄ ÎèÑÎ©îÏù∏ (Ïòà: Vercel ÎØ∏Î¶¨Î≥¥Í∏∞)
      baseURL = `${window.location.protocol}//${window.location.host}/`;
    }
  } else {
    // ÏÑúÎ≤Ñ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎäî getURL() ÏÇ¨Ïö©
    baseURL = getURL();
  }
  
  const localePrefix = locale ? `${locale}/` : '';
  const callbackURL = `${baseURL}${localePrefix}auth/callback`;
  
  console.log('üîó ÏÉùÏÑ±Îêú Ïù∏Ï¶ù ÏΩúÎ∞± URL:', {
    baseURL,
    locale,
    localePrefix,
    callbackURL,
    isClient: typeof window !== 'undefined',
    hostname: typeof window !== 'undefined' ? window.location.hostname : 'server'
  });
  
  return callbackURL;
}

export const getOAuthRedirectURL = () => {
  const baseURL = getURL()
  return `${baseURL}auth/callback`
}

// ÌôòÍ≤Ω Ï†ïÎ≥¥ ÌôïÏù∏
export const isDevelopment = () => {
  return process.env.NODE_ENV === 'development'
}

export const isProduction = () => {
  return process.env.NODE_ENV === 'production'
}

// ÎîîÎ≤ÑÍπÖÏö© ÌôòÍ≤Ω Ï†ïÎ≥¥ Î°úÍ∑∏
export const logEnvironmentInfo = () => {
  if (typeof window !== 'undefined') {
    console.log('üåç ÌôòÍ≤Ω Ï†ïÎ≥¥:', {
      NODE_ENV: process.env.NODE_ENV,
      SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,
      VERCEL_URL: process.env.NEXT_PUBLIC_VERCEL_URL,
      current_origin: window.location.origin,
      generated_url: getURL(),
      oauth_redirect: getOAuthRedirectURL()
    })
  }
} 